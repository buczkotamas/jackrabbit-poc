/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.mycompany.jackrabbit.poc.FingerprintParser;
import com.mycompany.jackrabbit.poc.LocalFileParser;
import com.mycompany.jackrabbit.poc.LocalFileParser.ParseResult;
import com.mycompany.jackrabbit.poc.Utils;
import com.naviextras.zippy.apis.services.market.FingerprintRO;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jcr.Binary;
import javax.jcr.Node;
import javax.jcr.Property;
import javax.jcr.PropertyType;
import javax.jcr.Repository;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;
import javax.jcr.Value;
import javax.jcr.ValueFormatException;
import javax.jcr.query.Query;
import javax.jcr.query.QueryManager;
import javax.jcr.query.QueryResult;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.jackrabbit.commons.JcrUtils;

/**
 *
 * @author tbuczko
 */
public class JCRForm extends javax.swing.JFrame {

    private Node currentJcrNode;
    private TreeNode currentTreeNode;
    Repository repository;
    Session session;
    private static final Logger logger = Logger.getLogger(JCRForm.class.getName());
    private static final Object[] COLUMN_NAMES = new Object[]{"Name", "Type", "Value"};
    private static final Object[][] EMPTY_MODEL = new Object[0][0];
    private static final DefaultTreeModel NOT_CONNECTED = new DefaultTreeModel(new DefaultMutableTreeNode("Not Connected"));

    private static class TreeNode extends DefaultMutableTreeNode {

        Node jcrNode;

        public TreeNode(Node node) {
            super(node);
            jcrNode = node;
        }

        public Node getJCRNode() {
            return jcrNode;
        }

        @Override
        public String toString() {
            try {
                return jcrNode.getName().isEmpty() ? "/" : jcrNode.getName();
            } catch (RepositoryException ex) {
                return ex.getMessage();
            }
        }
    }

    public JCRForm() {
        initComponents();
    }

    void showProperties(Node node) {
        currentJcrNode = node;
        if (node != null) {
            try {
                List<String[]> list = new ArrayList<String[]>();

                for (Property property : JcrUtils.getProperties(node)) {
                    String[] row = new String[3];
                    row[0] = property.getName();
                    row[1] = PropertyType.nameFromValue(property.getType());
                    if (property.getType() != PropertyType.BINARY) {
                        try {
                            row[2] = property.getValue().getString();
                        } catch (ValueFormatException ex) {
                            StringBuilder builder = new StringBuilder();
                            for (Value v : property.getValues()) {
                                builder.append(v.getString()).append(" ");
                            }
                            row[2] = builder.toString();
                        }
                    }
                    list.add(row);
                }
                DefaultListModel references = new DefaultListModel();
                for (Property property : JcrUtils.getReferences(node)) {
                    references.addElement(property.getPath());
                }
                lstNodeReferences.setModel(references);
                String[][] data = new String[list.size()][3];
                for (int i = 0; i < list.size(); i++) {
                    data[i] = list.get(i);
                }
                txtNodePath.setText(node.getPath());
                DefaultTableModel tableModel = new DefaultTableModel(data, COLUMN_NAMES);
                tblProperties.setModel(tableModel);
            } catch (RepositoryException ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            txtNodePath.setText("");
            DefaultTableModel tableModel = new DefaultTableModel(EMPTY_MODEL, COLUMN_NAMES);
            tblProperties.setModel(tableModel);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     *
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        splMain = new javax.swing.JSplitPane();
        pnlTree = new javax.swing.JPanel();
        btnReloadTree = new javax.swing.JButton();
        scpTree = new javax.swing.JScrollPane();
        jcrTree = new javax.swing.JTree();
        tbpMain = new javax.swing.JTabbedPane();
        pnlNode = new javax.swing.JPanel();
        scpProperties = new javax.swing.JScrollPane();
        tblProperties = new javax.swing.JTable();
        txtNodePath = new javax.swing.JTextField();
        btnRenameNode = new javax.swing.JButton();
        btnAddNode = new javax.swing.JButton();
        btnDeleteNode = new javax.swing.JButton();
        btnUploadNodeContent = new javax.swing.JButton();
        btnDownloadNodeContent = new javax.swing.JButton();
        scpNodeReferences = new javax.swing.JScrollPane();
        lstNodeReferences = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        pnlParseLocalFile = new javax.swing.JPanel();
        txtDownloadLocationPrefix = new javax.swing.JTextField();
        chbStoreContent = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        txtRepositoryName = new javax.swing.JTextField();
        chbAddDownloadLocationPrefix = new javax.swing.JCheckBox();
        chbParseFirst64Checksum = new javax.swing.JCheckBox();
        chbParseContentId = new javax.swing.JCheckBox();
        chbParseContentTimestamp = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstParseLocalFiles = new javax.swing.JList();
        btnAddFiles = new javax.swing.JButton();
        btnRemoveFiles = new javax.swing.JButton();
        btnStartParse = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        txtFilestoreName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pnlCreateFingerprint = new javax.swing.JPanel();
        txtFingerprintFilestoreName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtFingerprintFileName = new javax.swing.JTextField();
        btnSelectFingerprintFile = new javax.swing.JButton();
        btnCreateFingerprint = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtFingerprintRepositoryName = new javax.swing.JTextField();
        chbUsePrivateFilestore = new javax.swing.JCheckBox();
        pnlSearch = new javax.swing.JPanel();
        scpQuery = new javax.swing.JScrollPane();
        txtQuery = new javax.swing.JTextArea();
        btnQuery = new javax.swing.JButton();
        scpQueryResult = new javax.swing.JScrollPane();
        lstQueryResult = new javax.swing.JList();
        cmbMaxRows = new javax.swing.JComboBox();
        lblMaxRows = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnLogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rigo Imre Manager");
        setPreferredSize(new java.awt.Dimension(1200, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        splMain.setDividerLocation(256);

        pnlTree.setLayout(new java.awt.BorderLayout());

        btnReloadTree.setText("Reload");
        btnReloadTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadTreeActionPerformed(evt);
            }
        });
        pnlTree.add(btnReloadTree, java.awt.BorderLayout.SOUTH);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Not connected");
        jcrTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jcrTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                jcrTreeTreeWillExpand(evt);
            }
        });
        jcrTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jcrTreeValueChanged(evt);
            }
        });
        scpTree.setViewportView(jcrTree);

        pnlTree.add(scpTree, java.awt.BorderLayout.CENTER);

        splMain.setLeftComponent(pnlTree);

        pnlNode.setLayout(new java.awt.GridBagLayout());

        tblProperties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Type", "Value"
            }
        ));
        scpProperties.setViewportView(tblProperties);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(scpProperties, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(txtNodePath, gridBagConstraints);

        btnRenameNode.setText("Rename");
        btnRenameNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenameNodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnRenameNode, gridBagConstraints);

        btnAddNode.setText("Add Node");
        btnAddNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnAddNode, gridBagConstraints);

        btnDeleteNode.setText("Delete");
        btnDeleteNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnDeleteNode, gridBagConstraints);

        btnUploadNodeContent.setText("Upload");
        btnUploadNodeContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadNodeContentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnUploadNodeContent, gridBagConstraints);

        btnDownloadNodeContent.setText("Download");
        btnDownloadNodeContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadNodeContentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnDownloadNodeContent, gridBagConstraints);

        scpNodeReferences.setViewportView(lstNodeReferences);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(scpNodeReferences, gridBagConstraints);

        jLabel8.setText("References");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(jLabel8, gridBagConstraints);

        tbpMain.addTab("Properties", pnlNode);

        pnlParseLocalFile.setLayout(new java.awt.GridBagLayout());

        txtDownloadLocationPrefix.setText("http://download.naviextras.com/");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(txtDownloadLocationPrefix, gridBagConstraints);

        chbStoreContent.setSelected(true);
        chbStoreContent.setText("Store File content in Jackrabbit");
        chbStoreContent.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(chbStoreContent, gridBagConstraints);

        jLabel7.setText("Repository Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(jLabel7, gridBagConstraints);

        txtRepositoryName.setText("/repository");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(txtRepositoryName, gridBagConstraints);

        chbAddDownloadLocationPrefix.setText("Add Download Location Prefix");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(chbAddDownloadLocationPrefix, gridBagConstraints);

        chbParseFirst64Checksum.setSelected(true);
        chbParseFirst64Checksum.setText("Parse First 64KB Checksum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(chbParseFirst64Checksum, gridBagConstraints);

        chbParseContentId.setText("Parse Content ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(chbParseContentId, gridBagConstraints);

        chbParseContentTimestamp.setText("Parse Content Timestamp");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(chbParseContentTimestamp, gridBagConstraints);

        lstParseLocalFiles.setModel(new DefaultListModel<File>());
        jScrollPane1.setViewportView(lstParseLocalFiles);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(jScrollPane1, gridBagConstraints);

        btnAddFiles.setText("Add");
        btnAddFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFilesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(btnAddFiles, gridBagConstraints);

        btnRemoveFiles.setText("Remove");
        btnRemoveFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFilesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlParseLocalFile.add(btnRemoveFiles, gridBagConstraints);

        btnStartParse.setText("Parse");
        btnStartParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartParseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        pnlParseLocalFile.add(btnStartParse, gridBagConstraints);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Calculate Checksum");
        jRadioButton1.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(jRadioButton1, gridBagConstraints);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Read .md5 Files");
        jRadioButton2.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(jRadioButton2, gridBagConstraints);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Extract Archives");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(jCheckBox1, gridBagConstraints);

        txtFilestoreName.setText("/filestore");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(txtFilestoreName, gridBagConstraints);

        jLabel6.setText("Filestore Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(jLabel6, gridBagConstraints);

        tbpMain.addTab("Create Repository", pnlParseLocalFile);

        pnlCreateFingerprint.setLayout(new java.awt.GridBagLayout());

        txtFingerprintFilestoreName.setText("/filestore");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(txtFingerprintFilestoreName, gridBagConstraints);

        jLabel12.setText("Filestore Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(jLabel12, gridBagConstraints);

        jLabel13.setText("File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(jLabel13, gridBagConstraints);

        txtFingerprintFileName.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(txtFingerprintFileName, gridBagConstraints);

        btnSelectFingerprintFile.setText("Browse");
        btnSelectFingerprintFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFingerprintFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(btnSelectFingerprintFile, gridBagConstraints);

        btnCreateFingerprint.setText("Create Fingerprint");
        btnCreateFingerprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFingerprintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(btnCreateFingerprint, gridBagConstraints);

        jLabel14.setText("Repository Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(jLabel14, gridBagConstraints);

        txtFingerprintRepositoryName.setText("/fingerprint/www.nng.demo.com/123456789");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(txtFingerprintRepositoryName, gridBagConstraints);

        chbUsePrivateFilestore.setSelected(true);
        chbUsePrivateFilestore.setText("Use private Filestore for missing files");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlCreateFingerprint.add(chbUsePrivateFilestore, gridBagConstraints);

        tbpMain.addTab("Create Fingerprint", pnlCreateFingerprint);

        pnlSearch.setLayout(new java.awt.GridBagLayout());

        txtQuery.setColumns(20);
        txtQuery.setRows(5);
        txtQuery.setText("SELECT * FROM [nt:base] WHERE ISDESCENDANTNODE([/filestore]) AND ([md5Checksum]='deef154ec2d795e13c69337088d424b1' OR [first64Checksum]='fed2cee0197cf12c85f306406c79c1d6') AND [size]=CAST(3795759 AS LONG)");
        scpQuery.setViewportView(txtQuery);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSearch.add(scpQuery, gridBagConstraints);

        btnQuery.setText("Run Query");
        btnQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSearch.add(btnQuery, gridBagConstraints);

        lstQueryResult.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstQueryResult.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstQueryResultValueChanged(evt);
            }
        });
        scpQueryResult.setViewportView(lstQueryResult);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSearch.add(scpQueryResult, gridBagConstraints);

        cmbMaxRows.setEditable(true);
        cmbMaxRows.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "100", "1000" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        pnlSearch.add(cmbMaxRows, gridBagConstraints);

        lblMaxRows.setText("Max Row");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        pnlSearch.add(lblMaxRows, gridBagConstraints);

        tbpMain.addTab("Search", pnlSearch);

        splMain.setRightComponent(tbpMain);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(splMain, gridBagConstraints);

        txtAddress.setText("http://tbuczko-pc:8080/server");
        txtAddress.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(txtAddress, gridBagConstraints);

        txtUserName.setText("admin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(txtUserName, gridBagConstraints);

        lblUserName.setText("User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblUserName, gridBagConstraints);

        lblPassword.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblPassword, gridBagConstraints);

        txtPassword.setText("admin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(txtPassword, gridBagConstraints);

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(btnLogin, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        try {
            if (btnLogin.getText().equals("Login")) {
                repository = JcrUtils.getRepository(txtAddress.getText());
                session = repository.login(new SimpleCredentials(txtUserName.getText(), txtPassword.getText().toCharArray()));
                currentJcrNode = session.getRootNode();
                TreeNode rootTreeNode = new TreeNode(currentJcrNode);
                for (Node jcrChildNode : JcrUtils.getChildNodes(currentJcrNode)) {
                    rootTreeNode.add(new TreeNode(jcrChildNode));
                }
                jcrTree.setModel(new DefaultTreeModel(rootTreeNode));
                jcrTree.collapsePath(new TreePath(rootTreeNode));
                btnLogin.setText("Logout");
                txtAddress.setEnabled(false);
                txtUserName.setEnabled(false);
                txtPassword.setEnabled(false);
            } else if (btnLogin.getText().equals("Logout")) {
                jcrTree.setModel(NOT_CONNECTED);
                session.logout();
                btnLogin.setText("Login");
                txtAddress.setEnabled(true);
                txtUserName.setEnabled(true);
                txtPassword.setEnabled(true);
            }
        } catch (RepositoryException ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void jcrTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jcrTreeValueChanged
        currentTreeNode = (TreeNode) jcrTree.getLastSelectedPathComponent();
        if (currentTreeNode != null && (currentTreeNode.getUserObject() instanceof Node)) {
            currentJcrNode = currentTreeNode.jcrNode;
            showProperties(currentJcrNode);
        } else {
            showProperties(null);
        }
    }//GEN-LAST:event_jcrTreeValueChanged

    private void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueryActionPerformed
        DefaultListModel model = new DefaultListModel();
        try {
            QueryManager queryManager = session.getWorkspace().getQueryManager();
            String expression = txtQuery.getText();
            Query query;
            query = queryManager.createQuery(expression, Query.JCR_SQL2);
            QueryResult result = query.execute();
            int counter = Integer.parseInt(cmbMaxRows.getSelectedItem().toString());
            for (Node node : JcrUtils.getNodes(result)) {
                model.addElement(node.getPath());
                if (--counter == 0) {
                    break;
                }
            }
            if (model.isEmpty()) {
                model.addElement("No result.");
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        lstQueryResult.setModel(model);

    }//GEN-LAST:event_btnQueryActionPerformed

    private void jcrTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_jcrTreeTreeWillExpand
        DefaultTreeModel model = (DefaultTreeModel) (jcrTree.getModel());
        TreeNode treeNode = (TreeNode) evt.getPath().getLastPathComponent();
        for (int i = 0; i < treeNode.getChildCount(); i++) {
            try {
                TreeNode childTreeNode = (TreeNode) treeNode.getChildAt(i);
                if (childTreeNode.getChildCount() == 0 && childTreeNode.jcrNode.hasNodes()) {
                    for (Node jcrChildNode : JcrUtils.getChildNodes(childTreeNode.jcrNode)) {
                        childTreeNode.add(new TreeNode(jcrChildNode));
                    }
                    model.reload(childTreeNode);
                }
            } catch (RepositoryException ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jcrTreeTreeWillExpand

    private void btnReloadTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadTreeActionPerformed
        TreeNode node = (TreeNode) jcrTree.getLastSelectedPathComponent();
        if (node != null) {
            try {
                DefaultTreeModel model = (DefaultTreeModel) (jcrTree.getModel());
                jcrTree.collapsePath(new TreePath(node.getPath()));
                node.removeAllChildren();
                for (Node jcrChildNode : JcrUtils.getChildNodes(node.jcrNode)) {
                    node.add(new TreeNode(jcrChildNode));
                }
                model.reload(node);
            } catch (Exception ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnReloadTreeActionPerformed

    private void lstQueryResultValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstQueryResultValueChanged
//        String path = (String) lstQueryResult.getSelectedValue();
//        TreeNode tn = (TreeNode) jcrTree.getModel().getRoot();
//        for (String p : path.split("/")) {
//
//        }
//        jcrTree.expandPath(new TreePath(path.split("/")));
    }//GEN-LAST:event_lstQueryResultValueChanged


    private void btnAddNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNodeActionPerformed
        String name = JOptionPane.showInputDialog("Enter new node name");
        if (name != null && !name.isEmpty()) {
            try {
                currentJcrNode.addNode(name);
                currentJcrNode.getSession().save();
            } catch (Exception ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddNodeActionPerformed

    private void btnDeleteNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNodeActionPerformed
        try {
            if (JOptionPane.showConfirmDialog(null, "Delete node " + currentJcrNode.getPath() + "?", "Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.YES_OPTION) {
                currentJcrNode.getSession().removeItem(currentJcrNode.getPath());
                currentJcrNode.getSession().save();
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteNodeActionPerformed

    private void btnRenameNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenameNodeActionPerformed
        try {
            String name = JOptionPane.showInputDialog("Enter new node name", currentJcrNode.getPath());
            if (name != null && !name.isEmpty()) {
                currentJcrNode.getSession().move(currentJcrNode.getPath(), name);
                currentJcrNode.getSession().save();
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnRenameNodeActionPerformed

    private void btnDownloadNodeContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadNodeContentActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setSelectedFile(new File(currentJcrNode.getName()));
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                file.createNewFile();
                JcrUtils.readFile(currentJcrNode, new FileOutputStream(file));
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDownloadNodeContentActionPerformed

    private void btnUploadNodeContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadNodeContentActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                Binary binary = session.getValueFactory().createBinary(new FileInputStream(file));
                currentJcrNode.setProperty("jcr:data", binary);
                currentJcrNode.setProperty("first64Checksum", Utils.getFirst64KBChecksum(file));
                currentJcrNode.setProperty("md5Checksum", Utils.getChecksum(file));
                currentJcrNode.setProperty("size", file.length());
                currentJcrNode.getSession().save();
                showProperties(currentJcrNode);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUploadNodeContentActionPerformed

    private void btnAddFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilesActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(true);
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                DefaultListModel model = (DefaultListModel) lstParseLocalFiles.getModel();
                for (File file : fileChooser.getSelectedFiles()) {
                    if (!model.contains(file)) {
                        model.add(0, file);
                    }
                }
                lstParseLocalFiles.setModel(model);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddFilesActionPerformed

    private void btnRemoveFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFilesActionPerformed
        DefaultListModel model = (DefaultListModel) lstParseLocalFiles.getModel();
        for (Object file : lstParseLocalFiles.getSelectedValuesList()) {
            model.removeElement(file);
        }
    }//GEN-LAST:event_btnRemoveFilesActionPerformed

    private void btnStartParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartParseActionPerformed
        try {
            ParseResult parseResult = new ParseResult();
            for (int i = 0; i < lstParseLocalFiles.getModel().getSize(); i++) {
                File file = (File) lstParseLocalFiles.getModel().getElementAt(i);
                ParseResult partResult = new LocalFileParser(txtRepositoryName.getText(), txtFilestoreName.getText(), chbAddDownloadLocationPrefix.isSelected()
                        ? txtDownloadLocationPrefix.getText() : null,
                        file, session).parse();
                session.save();
                parseResult.newFiles += partResult.newFiles;
                parseResult.parsedFile += partResult.parsedFile;
            }
            JOptionPane.showMessageDialog(null, "Parsed files: " + parseResult.parsedFile + "\n" + "New files: " + parseResult.newFiles, "Parse Result", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n"
                    + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnStartParseActionPerformed

    private void btnSelectFingerprintFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFingerprintFileActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                txtFingerprintFileName.setText(fileChooser.getSelectedFile().getPath());
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSelectFingerprintFileActionPerformed

    private void btnCreateFingerprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFingerprintActionPerformed
        try {
            File file = new File(txtFingerprintFileName.getText());
            FingerprintRO fingerprint = TestUtil.getFingerprint(file);
            FingerprintParser.ParseResult result = new FingerprintParser(txtFingerprintRepositoryName.getText() + "/" + file.getName(), txtFingerprintFilestoreName.getText(),
                    fingerprint, chbUsePrivateFilestore.isSelected(), session).parse();
            session.save();
            JOptionPane.showMessageDialog(null, "Parsed files: " + result.parsedFile + "\n" + "New files: " + result.newFiles, "Parse Result", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateFingerprintActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JCRForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFiles;
    private javax.swing.JButton btnAddNode;
    private javax.swing.JButton btnCreateFingerprint;
    private javax.swing.JButton btnDeleteNode;
    private javax.swing.JButton btnDownloadNodeContent;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnQuery;
    private javax.swing.JButton btnReloadTree;
    private javax.swing.JButton btnRemoveFiles;
    private javax.swing.JButton btnRenameNode;
    private javax.swing.JButton btnSelectFingerprintFile;
    private javax.swing.JButton btnStartParse;
    private javax.swing.JButton btnUploadNodeContent;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chbAddDownloadLocationPrefix;
    private javax.swing.JCheckBox chbParseContentId;
    private javax.swing.JCheckBox chbParseContentTimestamp;
    private javax.swing.JCheckBox chbParseFirst64Checksum;
    private javax.swing.JCheckBox chbStoreContent;
    private javax.swing.JCheckBox chbUsePrivateFilestore;
    private javax.swing.JComboBox cmbMaxRows;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jcrTree;
    private javax.swing.JLabel lblMaxRows;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JList lstNodeReferences;
    private javax.swing.JList lstParseLocalFiles;
    private javax.swing.JList lstQueryResult;
    private javax.swing.JPanel pnlCreateFingerprint;
    private javax.swing.JPanel pnlNode;
    private javax.swing.JPanel pnlParseLocalFile;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JPanel pnlTree;
    private javax.swing.JScrollPane scpNodeReferences;
    private javax.swing.JScrollPane scpProperties;
    private javax.swing.JScrollPane scpQuery;
    private javax.swing.JScrollPane scpQueryResult;
    private javax.swing.JScrollPane scpTree;
    private javax.swing.JSplitPane splMain;
    private javax.swing.JTable tblProperties;
    private javax.swing.JTabbedPane tbpMain;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDownloadLocationPrefix;
    private javax.swing.JTextField txtFilestoreName;
    private javax.swing.JTextField txtFingerprintFileName;
    private javax.swing.JTextField txtFingerprintFilestoreName;
    private javax.swing.JTextField txtFingerprintRepositoryName;
    private javax.swing.JTextField txtNodePath;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextArea txtQuery;
    private javax.swing.JTextField txtRepositoryName;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
