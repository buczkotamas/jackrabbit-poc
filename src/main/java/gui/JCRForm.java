/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.mycompany.jackrabbit.poc.LocalFileParser;
import com.mycompany.jackrabbit.poc.RigoImre;
import com.mycompany.jackrabbit.poc.Utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jcr.Binary;
import javax.jcr.Node;
import javax.jcr.Property;
import javax.jcr.PropertyType;
import javax.jcr.RepositoryException;
import javax.jcr.Value;
import javax.jcr.ValueFormatException;
import javax.jcr.query.Query;
import javax.jcr.query.QueryManager;
import javax.jcr.query.QueryResult;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.jackrabbit.commons.JcrUtils;

/**
 *
 * @author tbuczko
 */
public class JCRForm extends javax.swing.JFrame {

    private Node currentJcrNode;
    private TreeNode currentTreeNode;
    private RigoImre rigoImre;
    private static final Logger logger = Logger.getLogger(JCRForm.class.getName());
    private static final Object[] COLUMN_NAMES = new Object[]{"Name", "Type", "Value"};
    private static final Object[][] EMPTY_MODEL = new Object[0][0];
    private static final DefaultTreeModel NOT_CONNECTED = new DefaultTreeModel(new DefaultMutableTreeNode("Not Connected"));

    private static class TreeNode extends DefaultMutableTreeNode {

        Node jcrNode;

        public TreeNode(Node node) {
            super(node);
            jcrNode = node;
        }

        public Node getJCRNode() {
            return jcrNode;
        }

        @Override
        public String toString() {
            try {
                return jcrNode.getName().isEmpty() ? "/" : jcrNode.getName();
            } catch (RepositoryException ex) {
                return ex.getMessage();
            }
        }
    }

    public JCRForm() {
        initComponents();
    }

    void showProperties(Node node) {
        currentJcrNode = node;
        if (node != null) {
            try {
                List<String[]> list = new ArrayList<String[]>();

                for (Property property : JcrUtils.getProperties(node)) {
                    String[] row = new String[3];
                    row[0] = property.getName();
                    row[1] = PropertyType.nameFromValue(property.getType());
                    if (property.getType() != PropertyType.BINARY) {
                        try {
                            row[2] = property.getValue().getString();
                        } catch (ValueFormatException ex) {
                            StringBuilder builder = new StringBuilder();
                            for (Value v : property.getValues()) {
                                builder.append(v.getString()).append(" ");
                            }
                            row[2] = builder.toString();
                        }
                    }
                    list.add(row);
                }
                String[][] data = new String[list.size()][3];
                for (int i = 0; i < list.size(); i++) {
                    data[i] = list.get(i);
                }
                txtNodePath.setText(node.getPath());
                txtRepositoryName.setText(node.getPath());
                txtBackupName.setText(node.getPath());
                DefaultTableModel tableModel = new DefaultTableModel(data, COLUMN_NAMES);
                tblProperties.setModel(tableModel);
            } catch (RepositoryException ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            txtNodePath.setText("");
            DefaultTableModel tableModel = new DefaultTableModel(EMPTY_MODEL, COLUMN_NAMES);
            tblProperties.setModel(tableModel);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        splMain = new javax.swing.JSplitPane();
        pnlTree = new javax.swing.JPanel();
        btnReloadTree = new javax.swing.JButton();
        scpTree = new javax.swing.JScrollPane();
        jcrTree = new javax.swing.JTree();
        tbpMain = new javax.swing.JTabbedPane();
        pnlNode = new javax.swing.JPanel();
        scpProperties = new javax.swing.JScrollPane();
        tblProperties = new javax.swing.JTable();
        txtNodePath = new javax.swing.JTextField();
        btnRenameNode = new javax.swing.JButton();
        btnAddNode = new javax.swing.JButton();
        btnDeleteNode = new javax.swing.JButton();
        btnUploadNodeContent = new javax.swing.JButton();
        btnDownloadNodeContent = new javax.swing.JButton();
        pnlParseLocalFile = new javax.swing.JPanel();
        fileUploadForm = new javax.swing.JFileChooser();
        txtDownloadLocationPrefix = new javax.swing.JTextField();
        chbStoreContent = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        txtRepositoryName = new javax.swing.JTextField();
        chbAddDownloadLocationPrefix = new javax.swing.JCheckBox();
        pnlParseDownloadServer = new javax.swing.JPanel();
        txtDownloadServerPassword = new javax.swing.JTextField();
        btnParseDownloadServer = new javax.swing.JButton();
        txtDownloadServerUserName = new javax.swing.JTextField();
        txtDownloadServerHost = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDownloadServerRoot = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDownloadServerPort = new javax.swing.JTextField();
        pnlSearch = new javax.swing.JPanel();
        scpQuery = new javax.swing.JScrollPane();
        txtQuery = new javax.swing.JTextArea();
        btnQuery = new javax.swing.JButton();
        scpQueryResult = new javax.swing.JScrollPane();
        lstQueryResult = new javax.swing.JList();
        cmbMaxRows = new javax.swing.JComboBox();
        lblMaxRows = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtBackupName = new javax.swing.JTextField();
        fcBackup = new javax.swing.JFileChooser();
        txtAddress = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnLogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rigo Imre Manager");
        setPreferredSize(new java.awt.Dimension(1200, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        splMain.setDividerLocation(256);

        pnlTree.setLayout(new java.awt.BorderLayout());

        btnReloadTree.setText("Reload");
        btnReloadTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadTreeActionPerformed(evt);
            }
        });
        pnlTree.add(btnReloadTree, java.awt.BorderLayout.SOUTH);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Not connected");
        jcrTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jcrTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                jcrTreeTreeWillExpand(evt);
            }
        });
        jcrTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jcrTreeValueChanged(evt);
            }
        });
        scpTree.setViewportView(jcrTree);

        pnlTree.add(scpTree, java.awt.BorderLayout.CENTER);

        splMain.setLeftComponent(pnlTree);

        pnlNode.setLayout(new java.awt.GridBagLayout());

        tblProperties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Type", "Value"
            }
        ));
        scpProperties.setViewportView(tblProperties);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(scpProperties, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(txtNodePath, gridBagConstraints);

        btnRenameNode.setText("Rename");
        btnRenameNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenameNodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnRenameNode, gridBagConstraints);

        btnAddNode.setText("Add Node");
        btnAddNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnAddNode, gridBagConstraints);

        btnDeleteNode.setText("Delete");
        btnDeleteNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnDeleteNode, gridBagConstraints);

        btnUploadNodeContent.setText("Upload");
        btnUploadNodeContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadNodeContentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnUploadNodeContent, gridBagConstraints);

        btnDownloadNodeContent.setText("Download");
        btnDownloadNodeContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadNodeContentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlNode.add(btnDownloadNodeContent, gridBagConstraints);

        tbpMain.addTab("Node", pnlNode);

        pnlParseLocalFile.setLayout(new java.awt.GridBagLayout());

        fileUploadForm.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        fileUploadForm.setApproveButtonText("Parse");
        fileUploadForm.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        fileUploadForm.setMultiSelectionEnabled(true);
        fileUploadForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileUploadFormActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(fileUploadForm, gridBagConstraints);

        txtDownloadLocationPrefix.setText("http://download.naviextras.com/");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(txtDownloadLocationPrefix, gridBagConstraints);

        chbStoreContent.setText("Store File content in Jackrabbit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(chbStoreContent, gridBagConstraints);

        jLabel7.setText("Repository Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(jLabel7, gridBagConstraints);

        txtRepositoryName.setText("download.naviextras.com");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(txtRepositoryName, gridBagConstraints);

        chbAddDownloadLocationPrefix.setSelected(true);
        chbAddDownloadLocationPrefix.setText("Download Location Prefix");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseLocalFile.add(chbAddDownloadLocationPrefix, gridBagConstraints);

        tbpMain.addTab("Parse Local Storage", pnlParseLocalFile);

        pnlParseDownloadServer.setLayout(new java.awt.GridBagLayout());

        txtDownloadServerPassword.setText("admin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(txtDownloadServerPassword, gridBagConstraints);

        btnParseDownloadServer.setText("Parse Download Server");
        btnParseDownloadServer.setEnabled(false);
        btnParseDownloadServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParseDownloadServerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(btnParseDownloadServer, gridBagConstraints);

        txtDownloadServerUserName.setText("admin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(txtDownloadServerUserName, gridBagConstraints);

        txtDownloadServerHost.setText("localhost");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(txtDownloadServerHost, gridBagConstraints);

        jLabel1.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(jLabel1, gridBagConstraints);

        jLabel2.setText("User Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Root Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        pnlParseDownloadServer.add(jLabel4, gridBagConstraints);

        txtDownloadServerRoot.setText("/content");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(txtDownloadServerRoot, gridBagConstraints);

        jLabel5.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(jLabel5, gridBagConstraints);

        txtDownloadServerPort.setText("2121");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlParseDownloadServer.add(txtDownloadServerPort, gridBagConstraints);

        tbpMain.addTab("Parse FTP Server", pnlParseDownloadServer);

        pnlSearch.setLayout(new java.awt.GridBagLayout());

        txtQuery.setColumns(20);
        txtQuery.setRows(5);
        txtQuery.setText("SELECT * FROM [nt:base] WHERE ISDESCENDANTNODE([/snapshots]) AND [buildTimestamp]=1401372002000 AND [contentId]=262669394 AND [size]=123336720");
        scpQuery.setViewportView(txtQuery);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSearch.add(scpQuery, gridBagConstraints);

        btnQuery.setText("Run Query");
        btnQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSearch.add(btnQuery, gridBagConstraints);

        lstQueryResult.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstQueryResult.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstQueryResultValueChanged(evt);
            }
        });
        scpQueryResult.setViewportView(lstQueryResult);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSearch.add(scpQueryResult, gridBagConstraints);

        cmbMaxRows.setEditable(true);
        cmbMaxRows.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "100", "1000" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        pnlSearch.add(cmbMaxRows, gridBagConstraints);

        lblMaxRows.setText("Max Row");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        pnlSearch.add(lblMaxRows, gridBagConstraints);

        tbpMain.addTab("Search", pnlSearch);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(txtBackupName, gridBagConstraints);

        fcBackup.setApproveButtonText("Backup");
        fcBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcBackupActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(fcBackup, gridBagConstraints);

        tbpMain.addTab("Backup", jPanel1);

        splMain.setRightComponent(tbpMain);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(splMain, gridBagConstraints);

        txtAddress.setText("http://tbuczko-pc:8080/server");
        txtAddress.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(txtAddress, gridBagConstraints);

        txtUserName.setText("admin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(txtUserName, gridBagConstraints);

        lblUserName.setText("User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblUserName, gridBagConstraints);

        lblPassword.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(lblPassword, gridBagConstraints);

        txtPassword.setText("admin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(txtPassword, gridBagConstraints);

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(btnLogin, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileUploadFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileUploadFormActionPerformed
        if (evt.getActionCommand().equals("ApproveSelection")) {
            try {
                for (File file : fileUploadForm.getSelectedFiles()) {
                    String repName = txtRepositoryName.getText();
                    String dlPrefix = chbAddDownloadLocationPrefix.isSelected() ? txtDownloadLocationPrefix.getText() : null;
                    boolean store = chbStoreContent.isSelected();
                    new LocalFileParser(repName, dlPrefix, file, rigoImre, store).parse();
                    rigoImre.getSession().save();
                }
            } catch (Exception ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fileUploadFormActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        try {
            if (btnLogin.getText().equals("Login")) {
                rigoImre = new RigoImre(txtAddress.getText(), txtUserName.getText(), txtPassword.getText());
                currentJcrNode = rigoImre.getSession().getRootNode();
                TreeNode rootTreeNode = new TreeNode(currentJcrNode);
                for (Node jcrChildNode : JcrUtils.getChildNodes(currentJcrNode)) {
                    rootTreeNode.add(new TreeNode(jcrChildNode));
                }
                jcrTree.setModel(new DefaultTreeModel(rootTreeNode));
                jcrTree.collapsePath(new TreePath(rootTreeNode));
                btnLogin.setText("Logout");
                txtAddress.setEnabled(false);
                txtUserName.setEnabled(false);
                txtPassword.setEnabled(false);
            } else if (btnLogin.getText().equals("Logout")) {
                jcrTree.setModel(NOT_CONNECTED);
                rigoImre.getSession().logout();
                btnLogin.setText("Login");
                txtAddress.setEnabled(true);
                txtUserName.setEnabled(true);
                txtPassword.setEnabled(true);
            }
        } catch (RepositoryException ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void jcrTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jcrTreeValueChanged
        currentTreeNode = (TreeNode) jcrTree.getLastSelectedPathComponent();
        if (currentTreeNode != null && (currentTreeNode.getUserObject() instanceof Node)) {
            currentJcrNode = currentTreeNode.jcrNode;
            showProperties(currentJcrNode);
        } else {
            showProperties(null);
        }
    }//GEN-LAST:event_jcrTreeValueChanged

    private void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueryActionPerformed
        DefaultListModel model = new DefaultListModel();
        try {
            QueryManager queryManager = rigoImre.getSession().getWorkspace().getQueryManager();
            String expression = txtQuery.getText();
            Query query;
            query = queryManager.createQuery(expression, Query.JCR_SQL2);
            QueryResult result = query.execute();
            int counter = Integer.parseInt(cmbMaxRows.getSelectedItem().toString());
            for (Node node : JcrUtils.getNodes(result)) {
                model.addElement(node.getPath());
                if (--counter == 0) {
                    break;
                }
            }
            if (model.isEmpty()) {
                model.addElement("No result.");
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        lstQueryResult.setModel(model);

    }//GEN-LAST:event_btnQueryActionPerformed

    private void jcrTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_jcrTreeTreeWillExpand
        DefaultTreeModel model = (DefaultTreeModel) (jcrTree.getModel());
        TreeNode treeNode = (TreeNode) evt.getPath().getLastPathComponent();
        for (int i = 0; i < treeNode.getChildCount(); i++) {
            try {
                TreeNode childTreeNode = (TreeNode) treeNode.getChildAt(i);
                if (childTreeNode.getChildCount() == 0 && childTreeNode.jcrNode.hasNodes()) {
                    for (Node jcrChildNode : JcrUtils.getChildNodes(childTreeNode.jcrNode)) {
                        childTreeNode.add(new TreeNode(jcrChildNode));
                    }
                    model.reload(childTreeNode);
                }
            } catch (RepositoryException ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jcrTreeTreeWillExpand

    private void btnReloadTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadTreeActionPerformed
        TreeNode node = (TreeNode) jcrTree.getLastSelectedPathComponent();
        if (node != null) {
            try {
                DefaultTreeModel model = (DefaultTreeModel) (jcrTree.getModel());
                jcrTree.collapsePath(new TreePath(node.getPath()));
                node.removeAllChildren();
                for (Node jcrChildNode : JcrUtils.getChildNodes(node.jcrNode)) {
                    node.add(new TreeNode(jcrChildNode));
                }
                model.reload(node);
            } catch (Exception ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnReloadTreeActionPerformed

    private void lstQueryResultValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstQueryResultValueChanged
//        String path = (String) lstQueryResult.getSelectedValue();
//        TreeNode tn = (TreeNode) jcrTree.getModel().getRoot();
//        for (String p : path.split("/")) {
//
//        }
//        jcrTree.expandPath(new TreePath(path.split("/")));
    }//GEN-LAST:event_lstQueryResultValueChanged


    private void btnParseDownloadServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParseDownloadServerActionPerformed
//        try {
//            new FTPParser(txtDownloadServerHost.getText(), Integer.parseInt(txtDownloadServerPort.getText()),
//                    txtDownloadServerUserName.getText(), txtDownloadServerPassword.getText(), txtDownloadServerRoot.getText(), rigoImre);
//            rigoImre.getSession().save();
//        } catch (Exception ex) {
//            Logger.getLogger(JCRForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnParseDownloadServerActionPerformed

    private void btnAddNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNodeActionPerformed
        String name = JOptionPane.showInputDialog("Enter new node name");
        if (name != null && !name.isEmpty()) {
            try {
                currentJcrNode.addNode(name);
                currentJcrNode.getSession().save();
            } catch (Exception ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddNodeActionPerformed

    private void btnDeleteNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNodeActionPerformed
        try {
            if (JOptionPane.showConfirmDialog(null, "Delete node " + currentJcrNode.getPath() + "?", "Delete", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.YES_OPTION) {
                currentJcrNode.getSession().removeItem(currentJcrNode.getPath());
                currentJcrNode.getSession().save();
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteNodeActionPerformed

    private void btnRenameNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenameNodeActionPerformed
        try {
            String name = JOptionPane.showInputDialog("Enter new node name", currentJcrNode.getPath());
            if (name != null && !name.isEmpty()) {
                currentJcrNode.getSession().move(currentJcrNode.getPath(), name);
                currentJcrNode.getSession().save();
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnRenameNodeActionPerformed

    private void btnDownloadNodeContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadNodeContentActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setSelectedFile(new File(currentJcrNode.getName()));
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                file.createNewFile();
                JcrUtils.readFile(currentJcrNode, new FileOutputStream(file));
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDownloadNodeContentActionPerformed

    private void btnUploadNodeContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadNodeContentActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                Binary binary = rigoImre.getSession().getValueFactory().createBinary(new FileInputStream(file));
                currentJcrNode.setProperty("jcr:data", binary);
                currentJcrNode.setProperty("first64Checksum", Utils.getFirst64KBChecksum(file));
                currentJcrNode.setProperty("md5Checksum", Utils.getChecksum(file));
                currentJcrNode.setProperty("size", file.length());
                currentJcrNode.getSession().save();
                showProperties(currentJcrNode);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUploadNodeContentActionPerformed

    private void fcBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcBackupActionPerformed
        if (evt.getActionCommand().equals("ApproveSelection")) {
            try {
                File file = fcBackup.getSelectedFile();
                if (file.isDirectory()) {
                    String repName = txtBackupName.getText();
                    new LocalFileParser(repName, null, file, rigoImre, false).parse();
                } else {
                    rigoImre.backupFingerprint(TestUtil.getFingerprint(file), file.getName(), "www.regserver.com", 123456789);
                }
                rigoImre.getSession().save();
            } catch (Exception ex) {
                logger.log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.toString() + "\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fcBackupActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JCRForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNode;
    private javax.swing.JButton btnDeleteNode;
    private javax.swing.JButton btnDownloadNodeContent;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnParseDownloadServer;
    private javax.swing.JButton btnQuery;
    private javax.swing.JButton btnReloadTree;
    private javax.swing.JButton btnRenameNode;
    private javax.swing.JButton btnUploadNodeContent;
    private javax.swing.JCheckBox chbAddDownloadLocationPrefix;
    private javax.swing.JCheckBox chbStoreContent;
    private javax.swing.JComboBox cmbMaxRows;
    private javax.swing.JFileChooser fcBackup;
    private javax.swing.JFileChooser fileUploadForm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTree jcrTree;
    private javax.swing.JLabel lblMaxRows;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JList lstQueryResult;
    private javax.swing.JPanel pnlNode;
    private javax.swing.JPanel pnlParseDownloadServer;
    private javax.swing.JPanel pnlParseLocalFile;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JPanel pnlTree;
    private javax.swing.JScrollPane scpProperties;
    private javax.swing.JScrollPane scpQuery;
    private javax.swing.JScrollPane scpQueryResult;
    private javax.swing.JScrollPane scpTree;
    private javax.swing.JSplitPane splMain;
    private javax.swing.JTable tblProperties;
    private javax.swing.JTabbedPane tbpMain;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBackupName;
    private javax.swing.JTextField txtDownloadLocationPrefix;
    private javax.swing.JTextField txtDownloadServerHost;
    private javax.swing.JTextField txtDownloadServerPassword;
    private javax.swing.JTextField txtDownloadServerPort;
    private javax.swing.JTextField txtDownloadServerRoot;
    private javax.swing.JTextField txtDownloadServerUserName;
    private javax.swing.JTextField txtNodePath;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextArea txtQuery;
    private javax.swing.JTextField txtRepositoryName;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
